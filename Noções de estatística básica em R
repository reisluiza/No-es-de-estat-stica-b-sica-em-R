---
title: 'Noções basicas de R'
output:
  html_notebook: default
  pdf_document: default
  html_document:
    df_print: paged
---
# Introdução ao R
O R é uma linguagem de programação estatística que possui uma série de vantagens, como ser totalmente gratuito e de código aberto, ser relativamente fácil de usar e possuir uma ampla comunidade acadêmica. Na biologia, é uma linguagem muito utilizada, o que facilita na hora de buscar soluções a possíveis problemas. Outra vantagem do R é que seus gráficos são bem aceitos, podendo ser utilizados em artigos (ao contrário dos gráficos do Excel, que não são recomendados). O R é normalmente utilizado junto a uma interface gráfica que o organiza, de forma que a utilização é mais amigável. No caso, utilizaremos o R Studio.

### Como instalar?
É muito simples. Acesse o site https://cran.r-project.org/mirrors.html e selecione um dos sites listados como "Brazil". Lá, é possível escolher seu sistema operacional. Faça o download do programa e execute-o seguindo as instruções.
Em seguida, acesse https://rstudio.com/products/rstudio/download/ e escolha a opção "free". Baixe o arquivo e execute-o, seguindo as instruções.

### Usando o R
Não abra o R "puro", mas sempre pelo R Studio. Ele é dividido em quatro partes:

1. O **editor de código**, no canto superior esquerdo, onde será possível escrever e editar scripts (que são o "rascunho" do seu código).

2. O **console**, no canto inferior esquerdo, é onde o comando será rodado de fato no R. É possível escrever os códigos diretamente nele, apesar de não ser o recomendado. Para rodar um comando no editor de código para o console, é possível usar a função "Run" na barra superior do editor ou o atalho "Enter + ctrl".

3. **Environment** e **history**, no canto superior direito. No primeiro, estarão os objetos criados (listas, vetores, etc). O history é o histórico de comandos utilizados.

4. **Files**, **plots**, **packages**, **help** e **viewer**, no canto inferior direito. Essa janela reúne várias funcionalidades em guias, onde Files são os arquivos da sua pasta de trabalho, Plots são as imagens geradas (especialmente gráficos), Packages reune uma lista de pacotes (funções extras do R), Help é o manual do R e Viewer serve para vizualizar-se localmente conteúdo web.

# Primeiros passos no R
A primeira experiência no R é usá-lo como uma grande calculadora, digitando as operações matemáticas. Tente o seguinte:
```{r}
2 + 2
```
Note que ele retorna o resultado da operação no console, como "[1] 4". Tente outras operações.
```{r}
6 - 2
4 * 4
16/8
4^3
(62 + 8)/(4 * (9 - 6/2))
```
Para se criar um objeto, usa-se o comando "<-" ou "=". Vamos usar "<-" por estilística. Experimente criar o seguinte objeto:
```{r}
x <- 5
```
Agora o comando "x" funciona como o número 5. Experimente:
```{r}
x + 5
(x*6)/2
x + x
```


## Tipos de objetos no R
As operações matemáticas acima não são objetos, mas simples códigos. No R, existem cinco classes de objeto: vetor, matriz, data frame, funções e lista.

### Vetor
São divididos em três tipos de vetores: caracteres (nomes), numérico (números) e lógico (são quantidades lógicas, criando-se condições que, se satisfeitas ou não, retornam TRUE ou FALSE). 
Uma função importante no R é a concatenar (c()), que permite que se liste uma série de números ou palavras.
```{r}
x <- 15 #vetor de tamanho 1
y <- c(1, 2, 3, 4, 5)
dados <- seq(1, 20, 4) #cria-se uma sequência se número de 1 a 20, de 4 em 4
cores <- c("vermelho", "verde", "azul", "amarelo") #vetor de caracteres
x < 1 #vetor lógico
x == 1
x != 1

```
Printe "x", "y", "dados" e "cores" no console para ver os vetores criados.

### Fator
Cria uma variável categórica, como em níveis.
```{r}
fatores <- factor(c("baixo", "médio", "alto"))
```


### Matriz
Uma matriz é um arranjo bidimensional de vetores, que devem ser do mesmo tipo (caracteres ou numérico).
```{r}
xy <- matrix(1:12, nrow = 3)
```
Uma série de funções podem ser rodadas a partir dessa matriz, que oferecerão modificações ou informações sobre a matriz.
```{r}
rownames(xy) <- LETTERS[1:3] #chama cada linha por uma letra, é possível fazer também:
rownames(xy) <- c("A", "B", "C")
colnames(xy) <- c("a1", "a2", "a3", "a4") #chama cada coluna por um nome
xy[1,] #chama a primeira linha
xy[,1] #chama a primeira coluna
head(xy) #primeiras linhas da matriz
tail(xy) #últimas linhas da matrix
summary(xy) #dá informações gerais sobre a matriz
```
### Data frame
Funciona igual a uma matriz, mas suporta vetores de tipos diferentes, sendo o mais comumente usado.
```{r}
receita <- data.frame(ingredientes = c("Farinha", "Cenoura", "Óleo", "Açúcar"),
                      ordem = factor(c("primeiro", "segundo", "terceiro", "quarto")),
                      quantidade = c(1, 1.5, 0.5, 1.5))
class(receita)
xy <- as.data.frame(xy) #converte a matriz em dataframe
```

### Lista
Reúne um conjunto de objetos ordenados de forma hierárquica, podendo ser uma matriz, um vetor lógico, etc.]
```{r}
lista <- list(name = "João", esposa = "Maria", 
              total.de.filhos = 2, idades = c(13,9))
```

## Visualizações gráficas
O R é uma ótima ferramenta para construir gráficos. Aqui, veremos alguns funções básicas e nativas, mas saiba que existem outros pacotes e formas de construir gráficos no R.
Primeiro, vamos montar um dataframe básico:
```{r}
set.seed(1)
dados <- data.frame(amostras = c(1:100), peso = sort(rnorm(100, mean = 5, sd = 1), decreasing = FALSE), altura = sort(rnorm(100, mean = 10, sd = 1), decreasing = FALSE))
```
Printe "dados" no seu console para ver o dataframe. Temos 100 amostras e dados de peso e altura para elas. A função rnorm() cria valores aleatórios com distribuição normal com a média e o desvio padrão pedidos (veremos essas métricas adiante no curso). A função sort() organiza elas em ordem do menor para o maior.

Podemos então ver alguns gráficos possíveis de se fazer. O primeiro é a função plot(). Primeiro, vamos rodar o attach(dados) para que possamos usar os títulos das colunas como variáveis:
```{r}
attach(dados)
plot(peso, altura)
```
O gráfico pode ser totalmente personalizado. Para entrar rapidamente na página do plot() na sessão "help", tecle F1 junto a função, e lá estarão detalhadas todas as modificações possíveis de se fazer no gráfico.
```{r}
plot(peso, altura, col = "deepskyblue4", ylab = "Altura em cm",
     xlab = "Peso em g", type = "p", sub = "Teste no R")
```
Outro gráfico possível de se fazer é um histograma:
```{r}
hist(peso, xlab = "Peso em g", col = "deepskyblue4")
hist(altura, xlab = "Altura em cm", col = "chartreuse4")
```

O boxplot, ou gráfico de caixa, é utilizado para visualizar a posição, dispersão, simetria, caudas e valores discrepantes dos dados. Ele mostra o primeiro e terceiro quartis e a mediana dos dados, assim como os limites superior e inferior. O asterisco/ponto acima ou abaixo do gráfico indicam os outliers.
```{r}
boxplot(altura, peso, col = c("deepskyblue4","chartreuse4"))
```
Outros gráficos são possíveis no R. Essa seção foi apenas para dar uma ideia geral a respeito de gráficos, e iremos tentar abordar outros no futuro.

# Estatística básica
O termo **população** diz respeito a um grupo, seja do que for, cujas informações são do interesse do pesquisador. Já a **amostra** é uma parcela dessa população. Por exemplo, todos os peixes no oceano são uma _população_, enquanto aqueles pescados por um pescador é a _amostra_. Ao trabalharmos, dificilmente toda a população será considerada, mas a amostra escolhida deve representar a população.

Após a obtenção dos dados, é possível obter rapidamente alguns descritores rápidos a respeito da amostra, as chamadas **medidas de tendência central**, que nos contam quais são os dados mais vistos e centrais, e **de dispersão**, que contam como os dados se organizam e distribuem – esses descritores são chamados de **parâmetros**. O uso de réplicas, comum na biologia, vem da necessidade de se garantir um resultado próximo à realidade: algumas amostras podem supervalorizar ou desvalorizar determinado parâmetro (são os chamados _outliers_), mas a análise de muitas amostras traz o resultado a um número próximo do real.

## Medidas de tendência central
### Média
É o parâmetro mais comumente utilizado. O cálculo da média leva em consideração o somatório de i observações/amostras dividido pelo total N de amostras. O R possui uma função para média, mean():

```{r}
mean(peso)
mean(altura)
```
### Mediana
A mediana é simplesmente o "meio" dos valores amostrados quando organizados em ordem crescente: existirá o mesmo número de observações antes e depois da mediana. Ela não é um parâmetro estatístico muito representante da amostragem, a menos que esta tenha uma distribuição simétrica, e apenas nesse último caso serve como uma estimativa da média. O R também possui uma função para a mediana:
```{r}
median(altura)
median(peso)
```
### Moda
É o valor dentre as amostras que aparece mais vezes, sendo uma medida de concentração. A moda pode ser tanto um valor único como uma série de valores frequentes. O R não possui uma função nativa para a moda.

## Medidas de dispersão
Uma medida de dispersão nos diz o quanto um dado varia em relação as suas medidas de tendência central, onde medidas próximas ao centro da distribuição possuem menor dispersão, e vice-versa. Elas são úteis porque as medidas de tendência central são, na maioria dos casos, insuficientes para descrever um conjunto de dados.

### Quantis
Os quantis dividem as amostras em frações. Os **quartis**, por exemplo, são medidas posicionadas em frações de 1/4 a 1/4 de todas as amostras. A função quantile() nos dá os primeiro, segundo (que é a mediana) e terceiro quartis, além do primeiro e último dado (0% e 100%).
```{r}
quantile(peso)
quantile(altura)
```
### Variância
A variância mede o quão distantes os valores estão da média, e é obtida através da soma dos quadrados (para considerar também valores negativos) entre cada valor e a média aritmética das amostras, dividida pela quantidade de elementos observado menos 1. Quanto maior for a variância, mais distantes da média estarão os valores das amostras. O R possui uma função para o cálculo da variância:
```{r}
var(peso)
var(altura)
```
Ocorre a subtração de 1 do total de amostras pois o resultado da divisão diretamente por um subestima o valor "real" da variância, isso é, a variância da população. Como a variância está ao quadrado, ela não está na mesma unidade das observações das amostras.

### Desvio padrão
O desvio padrão é a raiz quadrada positiva da variância, o que remove o problema do parâmetro não está na mesma unidade das observações. na prática, o desvio padrão indica qual o "erro" em relação a média. O R também possui uma função para o desvio padrão:
```{r}
sd(peso)
sd(altura)
```
### Coeficiente de variação
Como medidores de variabilidade, tanto a variância como o desvio padrão estão na magnitude dos dados: os dados para uma amostra do tamanho de orelhas de rato e de elefante vão ser muito diferentes, mesmo que a variância do elefante nem seja realmente grande. O coeficiente de variação demostra a variação relativa, fazendo com que valores sejam comparáveis independente da magnitude dos dados. Não existe função para o coeficiente de variação, mas é possível escrevê-la a partir da combinação de funções. O cálculo se dá pelo desvio padrão sobre a média da população, multiplicado por 100%.
```{r}
100*(sd(altura)/mean(altura))
100*(sd(peso)/mean(peso))

```
# Probabilidade


